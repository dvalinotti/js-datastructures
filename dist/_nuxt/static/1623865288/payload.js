__NUXT_JSONP__("/", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc){return {data:[{documents:[{slug:bj,description:"A non-linear data structure consisting of nodes and edges.",title:bk,category:bj,toc:[],body:{type:I,children:[{type:b,tag:E,props:{},children:[{type:a,value:"A Graph is a data structure that consists of nodes (values) and edges (connections between values). There are a few ways that you can represent a Graph, such as with Node "},{type:b,tag:$,props:{},children:[{type:a,value:"objects that have pointers"}]},{type:a,value:" to other nodes, or with an "},{type:b,tag:$,props:{},children:[{type:a,value:"adjacency list"}]},{type:a,value:" that holds key value pairs of nodes and their neighbors."}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:b,tag:"img",props:{alt:"",src:"\u002Fgraph-vertices-edges_0.webp"},children:[]}]},{type:a,value:l},{type:b,tag:au,props:{},children:[{type:a,value:r},{type:b,tag:av,props:{},children:[{type:a,value:aO}]},{type:a,value:r},{type:b,tag:E,props:{},children:[{type:a,value:l}]},{type:b,tag:aa,props:{className:[ab]},children:[{type:b,tag:ac,props:{className:[an,ad]},children:[{type:b,tag:Q,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bl}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:bk}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Add node to map w\u002F list of adjacencies"}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"addNode"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Add an edge between two nodes"}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"addEdge"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:" dest"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Check if both source and desitination nodes exist"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g,ai]},children:[{type:a,value:aw}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bn}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g,ai]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F If source node does not have adjacency to dest, add it to its adj. list"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bo}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F If dest node does not have adjacency to source, add it to its adj. list"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bo}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Print nodes adjacency list"}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"showNodes"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,O,C]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Breadth-First Search"}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:aq}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:bp},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Queue of nodes starting with source"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Map of nodes that have been visited already"}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bq}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bt}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Start with first node in queue"}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F If node has already been visited, continue to next while loop iteration"}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:"continue"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Check if current node is the destination we're looking for"}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"current "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Otherwise, mark this node as visited"}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Get neighbors of current node from this.nodes adj. list"}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n      \n      "},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Add every neighbor of current node to the queue"}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:aT}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bv}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bx}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Node not found in graph"}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Depth-First Search - Recursive"}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Check if we have already visited the current node"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Check if we have arrived at the destination"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"source "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Mark current node as visited"}]},{type:a,value:"\n    visited"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Get neighbors of current node from adj. list"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Loop through neighbors of current node"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:aT}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bv}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bw},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bx}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Recursively call DFS with neighbor node as new source, passing visited list"}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bz},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:bA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:" visited"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F Otherwise, destination is not in the graph."}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:aC}]}]}]},{type:a,value:r},{type:b,tag:E,props:{},children:[]},{type:a,value:l}]}]},dir:J,path:"\u002Fgraph",extension:K,createdAt:"2021-06-16T15:13:34.271Z",updatedAt:"2021-06-16T17:23:05.316Z"},{slug:aP,description:"A recursive traversal & search algorithm for reaching all vertices of a Graph or Tree data structure.",title:"Breadth-First Search",category:bB,toc:[{id:aD,depth:aV,text:aE}],body:{type:I,children:[{type:b,tag:E,props:{},children:[{type:a,value:"A standard BFS implementation puts each vertex of the graph into one of two categories:"}]},{type:a,value:l},{type:b,tag:aF,props:{},children:[{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:bC}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:bD}]},{type:a,value:l}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:a,value:bE}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:b,tag:$,props:{},children:[{type:a,value:"The algorithm works as follows:"}]}]},{type:a,value:l},{type:b,tag:aF,props:{},children:[{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Start by putting any one of the graph's vertices at the back of a queue."}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Take the front item of the queue and add it to the visited list."}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the back of the queue."}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Keep repeating steps 2 and 3 until the queue is empty."}]},{type:a,value:l}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:a,value:"The graph might have two different disconnected parts so to make sure that we cover every vertex, we can also run the BFS algorithm on every node"}]},{type:a,value:l},{type:b,tag:aW,props:{id:aD},children:[{type:b,tag:aX,props:{ariaHidden:U,href:bF,tabIndex:aY},children:[{type:b,tag:c,props:{className:[aZ,a_]},children:[]}]},{type:a,value:aE}]},{type:a,value:l},{type:b,tag:aa,props:{className:[ab]},children:[{type:b,tag:ac,props:{className:[ad,bG]},children:[{type:b,tag:Q,props:{},children:[{type:a,value:"create a queue Q \nmark v as visited and put v into Q \nwhile Q is non-empty \n    remove the head u of Q \n    mark and enqueue all (unvisited) neighbours of u\n"}]}]}]},{type:a,value:l},{type:b,tag:au,props:{},children:[{type:a,value:r},{type:b,tag:av,props:{},children:[{type:a,value:"\n    Example Code\n  "}]},{type:a,value:r},{type:b,tag:E,props:{},children:[{type:a,value:l}]},{type:b,tag:aa,props:{className:[ab]},children:[{type:b,tag:ac,props:{className:[ad,an]},children:[{type:b,tag:Q,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:" adjList "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aG}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:a$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:"10"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:ba}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:ba}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bJ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:bL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:bM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:bp},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aG}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"Set"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n\n  visited"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bN}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n  queue"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:" found "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:ap}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aR},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bq}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:"\n    node "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:bs},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bt}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:" adjList"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bb}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:aT}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:" n "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"of"}]},{type:a,value:aU},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"n "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:bM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,O,C]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:a,value:"'Found'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:" n"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\n        found "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bc}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:"\n        visited"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bN}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:by},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bd},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:a,value:"found"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,O,C]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:a,value:"'Target not found.'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:l}]}]}]},{type:a,value:r},{type:b,tag:E,props:{},children:[]},{type:a,value:l}]}]},dir:J,path:"\u002Fbfs",extension:K,createdAt:"2021-06-16T15:12:51.342Z",updatedAt:"2021-06-16T17:24:34.996Z"},{slug:aB,description:"Another recursive traversal & search algorithm for reaching all vertices of a Graph or Tree data structure.",title:"Depth-First Search",category:bB,toc:[{id:aD,depth:aV,text:aE}],body:{type:I,children:[{type:b,tag:E,props:{},children:[{type:a,value:"A standard DFS implementation puts each vertex of the graph into one of two categories:"}]},{type:a,value:l},{type:b,tag:aF,props:{},children:[{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:bC}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:bD}]},{type:a,value:l}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:a,value:bE}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:b,tag:$,props:{},children:[{type:a,value:"The DFS algorithm works as follows:"}]}]},{type:a,value:l},{type:b,tag:aF,props:{},children:[{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Start by putting any one of the graph's vertices on top of a stack."}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Take the top item of the stack and add it to the visited list."}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the top of the stack."}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:a,value:"Keep repeating steps 2 and 3 until the stack is empty."}]},{type:a,value:l}]},{type:a,value:l},{type:b,tag:aW,props:{id:aD},children:[{type:b,tag:aX,props:{ariaHidden:U,href:bF,tabIndex:aY},children:[{type:b,tag:c,props:{className:[aZ,a_]},children:[]}]},{type:a,value:aE}]},{type:a,value:l},{type:b,tag:aa,props:{className:[ab]},children:[{type:b,tag:ac,props:{className:[ad,bG]},children:[{type:b,tag:Q,props:{},children:[{type:a,value:"DFS(G, u)\n    u.visited = true\n    for each v ∈ G.Adj[u]\n        if v.visited == false\n            DFS(G,v)\n     \ninit() {\n    For each u ∈ G\n        u.visited = false\n     For each u ∈ G\n       DFS(G, u)\n}\n"}]}]}]},{type:a,value:l},{type:b,tag:au,props:{},children:[{type:a,value:r},{type:b,tag:av,props:{},children:[{type:a,value:aO}]},{type:a,value:r},{type:b,tag:E,props:{},children:[{type:a,value:l}]},{type:b,tag:aa,props:{className:[ab]},children:[{type:b,tag:ac,props:{className:[ad,an]},children:[{type:b,tag:Q,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:q}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aB}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:ax},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:" stack "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aG}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:bO}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:"\n  stack"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:aQ}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:a,value:bP},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:"isEmpty"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:br},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:"pop"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aj}]},{type:a,value:ay},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:bu},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,N]},children:[{type:a,value:U}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bR}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bS}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g,aI,ai]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:bT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:am},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bU}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bS}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g,aI,ai]},children:[{type:a,value:aI}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:bT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:Z}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:X},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:bU}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:l}]}]}]},{type:a,value:r},{type:b,tag:E,props:{},children:[]},{type:a,value:l}]}]},dir:J,path:"\u002Fdfs",extension:K,createdAt:"2021-06-16T15:13:08.419Z",updatedAt:"2021-06-16T17:25:48.041Z"},{slug:"hash-map",description:Y,title:"Hash Map",category:"hashmap",toc:[],body:{type:I,children:[]},dir:J,path:"\u002Fhash-map",extension:K,createdAt:"2021-06-16T15:14:04.433Z",updatedAt:"2021-06-16T17:26:52.135Z"},{slug:"hash-set",description:"A data structure that stores data in a key\u002Fvalue pair system.",title:"Hash Set",category:"hashset",toc:[{id:bV,depth:aV,text:bW}],body:{type:I,children:[{type:b,tag:"ul",props:{},children:[{type:a,value:l},{type:b,tag:L,props:{},children:[{type:b,tag:$,props:{},children:[{type:a,value:"Key"}]},{type:a,value:": Unique integer or string value, which can be computed or not."}]},{type:a,value:l},{type:b,tag:L,props:{},children:[{type:b,tag:$,props:{},children:[{type:a,value:"Value"}]},{type:a,value:": The data related to the key to be stored in the HashMap."}]},{type:a,value:l}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:a,value:"HashMaps can be implemented simply in JavaScript using the "},{type:b,tag:Q,props:{},children:[{type:a,value:a$}]},{type:a,value:" object."}]},{type:a,value:l},{type:b,tag:aa,props:{className:[ab]},children:[{type:b,tag:ac,props:{className:[an,ad]},children:[{type:b,tag:Q,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:" hashMap "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:aG}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:a$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:"\nhashMap"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:"set"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:a,value:be}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:a,value:"'value'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,O,C]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bb}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:a,value:be}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bX},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F ['value']"}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,O,C]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bc}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:a,value:be}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:bX},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F true"}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,O,C]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:bf},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:bc}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,V]},children:[{type:a,value:"'foo'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"   "},{type:b,tag:c,props:{className:[d,y]},children:[{type:a,value:"\u002F\u002F false"}]},{type:a,value:l}]}]}]},{type:a,value:l},{type:b,tag:aW,props:{id:bV},children:[{type:b,tag:aX,props:{ariaHidden:U,href:"#hashing-hash-functions",tabIndex:aY},children:[{type:b,tag:c,props:{className:[aZ,a_]},children:[]}]},{type:a,value:bW}]},{type:a,value:l},{type:b,tag:E,props:{},children:[{type:a,value:"Instead of using the exact key value provided by a "},{type:b,tag:Q,props:{},children:[{type:a,value:".add()"}]},{type:a,value:" or "},{type:b,tag:Q,props:{},children:[{type:a,value:".set()"}]},{type:a,value:"-type function, you can pass the key value through a "},{type:b,tag:$,props:{},children:[{type:a,value:"hash function"}]},{type:a,value:" that performs some alteration on the original value. Then, the hashed value is used for storing in the HashMap. when a key value is requested through "},{type:b,tag:Q,props:{},children:[{type:a,value:".get()"}]},{type:a,value:", the provided key is run through the hash function, and the value is accessed with the hashed key and returned."}]},{type:a,value:l},{type:b,tag:au,props:{},children:[{type:a,value:r},{type:b,tag:av,props:{},children:[{type:a,value:aO}]},{type:a,value:r},{type:b,tag:E,props:{},children:[{type:a,value:l}]},{type:b,tag:aa,props:{className:[ab]},children:[{type:b,tag:ac,props:{className:[an,ad]},children:[{type:b,tag:Q,props:{},children:[{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,bY]},children:[{type:a,value:bZ}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:"32"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,ar,y]},children:[{type:a,value:"\u002F**\n * Initialize your data structure here.\n *\u002F"}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bl}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:a,value:"HashMap"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bm}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:as}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:" length "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:bn}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,bY]},children:[{type:a,value:bZ}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,ar,y]},children:[{type:a,value:"\u002F**\n   * Returns the hashed key value, which is the sum of all of the key's character's codes,\n   * mod the max length of the HashMap.\n   * "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:at}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:P}]},{type:a,value:" \n   * "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:"@returns"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:aJ}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:W}]},{type:a,value:b_},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,"known-class-name",C]},children:[{type:a,value:"Array"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,g,"module"]},children:[{type:a,value:"from"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:"reduce"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:"acc"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:b$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,"arrow",m]},children:[{type:a,value:"=\u003E"}]},{type:a,value:" acc "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"+"}]},{type:a,value:b$},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:"charCodeAt"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:al}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n    \n    "},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:b_},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"%"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,ar,y]},children:[{type:a,value:"\u002F**\n   * value will always be non-negative.\n   * "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:at}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:P}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:at}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:aH}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bg}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ca}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:aJ}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"put"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:" value"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:" key"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:" value "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,ar,y]},children:[{type:a,value:"\u002F**\n   * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n   * "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:at}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:V},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:P}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bg}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:aJ}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:bb}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:G}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ah}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g,ai]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"-"}]},{type:b,tag:c,props:{className:[d,A]},children:[{type:a,value:ba}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,g,x]},children:[{type:a,value:S}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:aH}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:"\n  \n  "},{type:b,tag:c,props:{className:[d,ar,y]},children:[{type:a,value:"\u002F**\n   * Removes the mapping of the specified value key if this map contains a mapping for the key\n   * "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:at}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:P}]},{type:a,value:aL},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:bg}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,C]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ca}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]}]},{type:a,value:aJ}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,q]},children:[{type:a,value:"remove"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,F]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:T}]},{type:a,value:bh},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,v,q,k]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:D}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:s}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:t}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:w}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,g,ai]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:n}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:l},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:p}]},{type:a,value:l}]}]}]},{type:a,value:r},{type:b,tag:E,props:{},children:[]},{type:a,value:l}]}]},dir:J,path:"\u002Fhash-set",extension:K,createdAt:"2021-06-16T15:14:17.530Z",updatedAt:"2021-06-16T17:31:55.617Z"},{slug:cb,description:Y,title:"Heap",category:cb,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Fheap",extension:K,createdAt:"2021-06-16T15:13:44.639Z",updatedAt:"2021-06-16T15:15:21.701Z"},{slug:aR,description:Y,title:"Queue",category:cc,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Fqueue",extension:K,createdAt:"2021-06-16T15:16:45.053Z",updatedAt:"2021-06-16T15:16:55.185Z"},{slug:bP,description:Y,title:bO,category:cc,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Fstack",extension:K,createdAt:"2021-06-16T15:16:58.982Z",updatedAt:"2021-06-16T15:17:02.146Z"},{slug:"linked-list",description:Y,title:"Linked List",category:bi,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Flinked-list",extension:K,createdAt:"2021-06-16T15:16:08.218Z",updatedAt:"2021-06-16T15:16:23.184Z"},{slug:"merge-sort",description:Y,title:"Merge Sort",category:bi,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Fmerge-sort",extension:K,createdAt:"2021-06-16T15:16:28.749Z",updatedAt:"2021-06-16T15:16:32.560Z"},{slug:"quick-sort",description:"An aptly-named sorting algorithm that uses a \"pivot\" value to split an array in two, and recursively sort each of those arrays.",title:"Quick Sort",category:bi,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Fquick-sort",extension:K,createdAt:"2021-06-16T15:08:39.558Z",updatedAt:"2021-06-16T15:15:40.360Z"},{slug:"bst",description:Y,title:"Binary Search Tree",category:aN,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Fbst",extension:K,createdAt:"2021-06-16T15:17:33.553Z",updatedAt:"2021-06-16T15:27:45.287Z"},{slug:"trie",description:Y,title:"Trie",category:aN,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Ftrie",extension:K,createdAt:"2021-06-16T15:17:53.929Z",updatedAt:"2021-06-16T15:17:57.076Z"},{slug:aN,description:Y,title:"Tree",category:aN,toc:[],body:{type:I,children:[]},dir:J,path:"\u002Ftree",extension:K,createdAt:"2021-06-16T15:17:23.459Z",updatedAt:"2021-06-16T15:17:30.545Z"}]}],fetch:{},mutations:void 0}}("text","element","span","token","punctuation"," ","keyword","(",")",".","property-access","\n","operator",";","{","}","function","\n  ","[","]","\n    ","method","=","control-flow","comment",",","number","\n      ","class-name","this","p","parameter","if","\n\n    ","root","\u002F",".md","li","\n\n  ","boolean","console","key","code","nodes","return","const","true","string","let","current","Description here.","push","source","strong","div","nuxt-content-highlight","pre","line-numbers","length","node","src","===","nil","!","log","0","\n\n      ","language-js","dest","false"," destination","doc-comment","buckets","@param","details","summary","undefined"," visited ","visited","\n        "," i ","dfs","\n\n","pseudocode","Pseudocode","ol","new","value","null","\n   *\u002F","getHashKey","\n   * ","hashKey","tree","Example Code","bfs","while","queue"," neighbors ","for"," neighbors",3,"h3","a",-1,"icon","icon-link","Map","1","get","has","n","'key'","hashMap","@return"," hashKey ","sort","graph","Graph","class","constructor","||","includes"," queue ","\u003E"," current "," queue","shift","\n      visited","\u003C"," i","++","\n        queue","neighbors","i","graphsearch","Visited","Not Visited","The purpose of the algorithm is to mark each vertex as visited while avoiding cycles.","#pseudocode","language-text","4","17","9","12","18"," target","add","Stack","stack"," stack","left","!==","\n        stack","right","hashing-hash-functions","Hashing (Hash Functions)","  ","constant","DEFAULT_LENGTH"," charCodeSum "," curr","void","heap","queuestack")));